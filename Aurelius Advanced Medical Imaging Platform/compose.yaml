services:
  # ============================================================================
  # DATABASE & CACHING
  # ============================================================================
  
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: aurelius-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: aurelius
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres:/migrations
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aurelius-net

  redis:
    image: redis:7-alpine
    container_name: aurelius-redis
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - aurelius-net

  # ============================================================================
  # OBJECT STORAGE
  # ============================================================================
  
  minio:
    image: minio/minio:latest
    container_name: aurelius-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - aurelius-net

  # MinIO client for bucket creation
  minio-init:
    image: minio/mc:latest
    container_name: aurelius-minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/dicom-studies --ignore-existing;
      /usr/bin/mc mb myminio/wsi-slides --ignore-existing;
      /usr/bin/mc mb myminio/ml-models --ignore-existing;
      /usr/bin/mc mb myminio/processed-data --ignore-existing;
      /usr/bin/mc anonymous set download myminio/dicom-studies;
      /usr/bin/mc anonymous set download myminio/wsi-slides;
      exit 0;
      "
    networks:
      - aurelius-net

  # ============================================================================
  # DICOM SERVER
  # ============================================================================
  
  orthanc:
    image: orthancteam/orthanc:latest
    container_name: aurelius-orthanc
    environment:
      ORTHANC_JSON: |
        {
          "Name": "Aurelius Orthanc",
          "RemoteAccessAllowed": true,
          "AuthenticationEnabled": false,
          "RegisteredUsers": {
            "orthanc": "orthanc"
          },
          "DicomWeb": {
            "Enable": true,
            "Root": "/dicom-web/",
            "EnableWado": true,
            "WadoRoot": "/wado",
            "Ssl": false,
            "StowMaxInstances": 10,
            "StowMaxSize": 1073741824
          },
          "PostgreSQL": {
            "EnableIndex": true,
            "EnableStorage": false,
            "Host": "postgres",
            "Port": 5432,
            "Database": "orthanc",
            "Username": "postgres",
            "Password": "postgres"
          },
          "Plugins": ["/usr/share/orthanc/plugins"]
        }
    ports:
      - "8042:8042"
      - "4242:4242"
    volumes:
      - orthanc_data:/var/lib/orthanc/db
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/system"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aurelius-net

  # ============================================================================
  # IDENTITY & ACCESS MANAGEMENT
  # ============================================================================
  
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: aurelius-keycloak
    command: start-dev --import-realm
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak-realm.json:/opt/keycloak/data/import/aurelius-realm.json
      - keycloak_data:/opt/keycloak/data
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - aurelius-net

  # ============================================================================
  # FHIR SERVER
  # ============================================================================
  
  fhir-server:
    image: hapiproject/hapi:latest
    container_name: aurelius-fhir
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/fhir
      spring.datasource.username: postgres
      spring.datasource.password: postgres
      spring.datasource.driverClassName: org.postgresql.Driver
      spring.jpa.properties.hibernate.dialect: ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgres94Dialect
      hapi.fhir.fhir_version: R4
      hapi.fhir.subscription.resthook_enabled: true
      hapi.fhir.subscription.websocket_enabled: true
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/fhir/metadata"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aurelius-net

  # ============================================================================
  # OBSERVABILITY
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: aurelius-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infra/observability/alerts:/etc/prometheus/alerts
      - prometheus_data:/prometheus
    networks:
      - aurelius-net

  grafana:
    image: grafana/grafana:latest
    container_name: aurelius-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/observability/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
    networks:
      - aurelius-net

  # ============================================================================
  # MESSAGE BROKER
  # ============================================================================
  
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: aurelius-kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - aurelius-net

  # ============================================================================
  # APPLICATION SERVICES
  # ============================================================================
  
  gateway:
    build:
      context: ./apps/gateway
      dockerfile: Dockerfile
    container_name: aurelius-gateway
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aurelius
      REDIS_URL: redis://:redis123@redis:6379/0
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: aurelius
      KEYCLOAK_CLIENT_ID: gateway
      KEYCLOAK_CLIENT_SECRET: gateway-secret
      IMAGING_SVC_URL: http://imaging-svc:8001
      ML_SVC_URL: http://ml-svc:8002
      ETL_SVC_URL: http://etl-svc:8003
      FHIR_SVC_URL: http://fhir-server:8080/fhir
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      LOG_LEVEL: INFO
      # OpenTelemetry
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      OTEL_SERVICE_NAME: gateway
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: prometheus
      OTEL_LOGS_EXPORTER: none
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aurelius-net

  imaging-svc:
    build:
      context: ./apps/imaging-svc
      dockerfile: Dockerfile
    container_name: aurelius-imaging-svc
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aurelius
      REDIS_URL: redis://:redis123@redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      ORTHANC_URL: http://orthanc:8042
      ORTHANC_USERNAME: orthanc
      ORTHANC_PASSWORD: orthanc
      LOG_LEVEL: INFO
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      orthanc:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./temp-uploads:/tmp/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aurelius-net

  ml-svc:
    build:
      context: ./apps/ml-svc
      dockerfile: Dockerfile
    container_name: aurelius-ml-svc
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aurelius
      REDIS_URL: redis://:redis123@redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MLFLOW_TRACKING_URI: http://mlflow:5000
      TRITON_URL: triton:8001
      LOG_LEVEL: INFO
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aurelius-net

  celery-worker:
    build:
      context: ./apps/imaging-svc
      dockerfile: Dockerfile
    container_name: aurelius-celery-worker
    command: celery -A app.worker worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aurelius
      REDIS_URL: redis://:redis123@redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    depends_on:
      - redis
      - postgres
    networks:
      - aurelius-net

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: aurelius-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://gateway:8000
      NEXT_PUBLIC_WS_URL: ws://gateway:8000
      NEXT_PUBLIC_KEYCLOAK_URL: http://keycloak:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: aurelius
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: frontend
    ports:
      - "3000:3000"
    depends_on:
      - gateway
      - keycloak
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aurelius-net

  # ============================================================================
  # ML INFRASTRUCTURE (Optional - resource intensive)
  # ============================================================================
  
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.9.2
    container_name: aurelius-mlflow
    command: >
      mlflow server
      --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlflow
      --default-artifact-root s3://ml-models/
      --host 0.0.0.0
      --port 5000
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - minio
    networks:
      - aurelius-net

  # Uncomment for GPU inference
  # triton:
  #   image: nvcr.io/nvidia/tritonserver:23.12-py3
  #   container_name: aurelius-triton
  #   command: tritonserver --model-repository=/models
  #   ports:
  #     - "8001:8001"
  #     - "8002:8002"
  #   volumes:
  #     - ./models:/models
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   networks:
  #     - aurelius-net

  # ============================================================================
  # SEARCH & INDEXING
  # ============================================================================
  
  opensearch:
    image: opensearchproject/opensearch:2.11.1
    container_name: aurelius-opensearch
    environment:
      discovery.type: single-node
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
      DISABLE_SECURITY_PLUGIN: "true"  # For dev only
      DISABLE_INSTALL_DEMO_CONFIG: "true"
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - aurelius-net

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.1
    container_name: aurelius-opensearch-dashboards
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: "true"
    ports:
      - "5601:5601"
    depends_on:
      opensearch:
        condition: service_healthy
    networks:
      - aurelius-net

  search-svc:
    build:
      context: ./apps/search-svc
      dockerfile: Dockerfile
    container_name: aurelius-search-svc
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aurelius
      REDIS_URL: redis://:redis123@redis:6379/0
      OPENSEARCH_URL: http://opensearch:9200
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      LOG_LEVEL: INFO
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aurelius-net

  # ============================================================================
  # OBSERVABILITY & TRACING
  # ============================================================================

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: aurelius-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - aurelius-net

volumes:
  postgres_data:
  redis_data:
  minio_data:
  orthanc_data:
  keycloak_data:
  prometheus_data:
  grafana_data:
  kafka_data:
  opensearch_data:

networks:
  aurelius-net:
    driver: bridge
